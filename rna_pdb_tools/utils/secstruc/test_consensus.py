#!/usr/bin/env python
#!-*-coding: utf-8-*-

"""
tests for consensus.py.
"""

__author__ = "Tomasz Puton"
__credits__ = "Kristian Rother"
__license__ = "GNU GPL 2.0"
__version__ = "1.0"
__maintainer__ = "Tomasz Puton"
__email__ = "t.puton@amu.edu.pl"
__status__ = "Production"

import os
from numpy import array, zeros
from numpy.testing import assert_array_equal
from unittest import TestCase, main
from .consensus import calc_consensus_secstruc_for_dbn, ConsensusSecstrucError, \
turn_dbn_into_interaction_matrix, calc_consensus_secstruc_for_bps
from .secstruc import ConflictInBasePairsError, ViennaStructure, BasePairs, \
solve_conflicts

class CalcConsensusSecstrucForDbnTests(TestCase):
    """
        Tests for calc_consensus_secstruc_for_dbn
    """
    
    def test_calc_consensus_secstruc(self):
        """Calculates a consensus secstr. from a list of dot-bracket strings."""
        result = calc_consensus_secstruc_for_dbn(SECSTRUCS, 1.0)
        self.assertEqual(len(result),len(SECSTRUCS[0]))
        self.assertEqual(result,CONSENSUS)

    def test_threshold(self):
        """Optional parameter should influence the result."""
        result = calc_consensus_secstruc_for_dbn(BASIC_EXAMPLE) # default 1.0
        self.assertEqual(result,'.............')
        result = calc_consensus_secstruc_for_dbn(BASIC_EXAMPLE, 1.0)
        self.assertEqual(result,'.............')
        result = calc_consensus_secstruc_for_dbn(BASIC_EXAMPLE, 0.51)
        self.assertEqual(result,'..(((...)))..')
        result = calc_consensus_secstruc_for_dbn(SECSTRUCS, 0.625)
        self.assertEqual(result,
                '..........((....)).((((((((..........))))))))..............')
        
    def test_low_threshold(self):
        """Tests consensus secstruc with very low threshold
        """
        result = calc_consensus_secstruc_for_dbn(BASIC_EXAMPLE, 0.4)
        self.assertEqual(result, '..(((...)))..')
        
        self.assertRaises(ConflictInBasePairsError,
                          calc_consensus_secstruc_for_dbn,
                          BASIC_EXAMPLE, 0.2) # konflikt w resztach!

    def test_identity(self):
        """If there is only one, the same seq should be returned."""
        seq = '(.(.(..).))'
        result = calc_consensus_secstruc_for_dbn([seq])
        self.assertEqual(result, seq)

    def test_empty(self):
        """Empty input raises an exception"""
        self.assertRaises(ConsensusSecstrucError,
                          calc_consensus_secstruc_for_dbn, [])

    def test_valid_threshold(self):
        """The threshold parameter must be between 0.5 < x <= 1.0."""
        self.assertRaises(ConsensusSecstrucError,
                          calc_consensus_secstruc_for_dbn, BASIC_EXAMPLE, -0.8)
        self.assertRaises(ConsensusSecstrucError,
                          calc_consensus_secstruc_for_dbn, BASIC_EXAMPLE, 0.0)
        self.assertRaises(ConsensusSecstrucError,
                          calc_consensus_secstruc_for_dbn, BASIC_EXAMPLE, 1.01)
        result = calc_consensus_secstruc_for_dbn(BASIC_EXAMPLE, 0.500001)
    
    def test_long(self):
        """Profiling long example."""
        secstrucs = []
        for line in open(os.path.join('test_data', 'long_test.txt')):
            secstrucs.append(line.strip())
        result = calc_consensus_secstruc_for_dbn(secstrucs)
        self.assertTrue(len(result), len(secstrucs[0]))

    def test_rnastrand_long(self):
        """Two long examples from the RNAstrand database: CRW_00544 & CRW_00528
        """
        # CRW_00544
        # contextfold
        pred_1 = '(((.((((....(((.........)))..................(((((((....((((...................................(((...........)))......((((((.....((((....))))......))))))((((.....((((((.((((((((....))))).........((((((...................)))).))...(((.......((((.((((((.......)))..)))....)))).....))).....(((((((.....)))))))...........((((.((((((((((.(((((((..........)))))))............(((((((........((((((((..........................((((.((((((((((((((.................................)))))))))...(((((((((((((.(((........((((((........((((....((((.............((((..((((((((((............))))))))))..))))...........(((((((......))))))).....(((((((....)))))))..(((((((.......)))))))...............((....)).................(((((.....((((....((((((...........))))))...))))....))))).....))))....)))).(((((.(((.....(((.........)))...)))...)))))........................(((((((.((((..(((.((((((((...((((((((((((((((((.......)))).((....))...........................)))))))))))))).......((((((....(((((.((((((.(.......).).((...(((..((((........)))).)))..))))))).))))).((.......)).......))))))....)))))))).........(((((....)))))...............)))))))))))).))((((.....((((..(((((((.(((....(((((((..(((((...(((.(((((((((((.....(((((((((((((......((((.(((.......((...................))....))))))).((..(((((((((........))))))))).......))......................)))))))....(....)..............................)))))).....(((((((.......))))..........(..(.......((.(((((((((((((((......(((............(((............)))....((((((..(((((((((((((.......(((((((((((...)))))))))))((((......((..((((((((.....(((((((........(........).(((((((((...((((.........))))((((((((((((((((..((((((((................)))))))).........(.......)...........))))))))))))))))........)))))))))....))))))).........))))))))..))......))))...((((((((((.((........)).))))))))))......)))))))))))))...............(((((((........(((........(((((((...)))))))....))))))))))............)))))).........................(((((....))))).............(((((...........)))))))).....((((((.(((.........))).)).))))...))))))))..((((((....))))))))))))).))....)..).......)))........................................(((((....((((((((..((((....))))..))))))))..)))))))))))))))).)))....)))))...))))))).....(((((...)))))............)))...))))))).((((((.((((((............)))))).)))))).....))))........................((((((((((((.....(((...((((........((((...))))..((((((((((((...............((((.((((.........)))).))))(((((..(((...((((.(((.(((((........))))).))).))))...)))..))))).......))))))))))))........))))...)))....))))))))))))....))))....)))))))))...)))))))))))))....)))))))))((((((.((.((((((((.................((((((((.((......(.(......(((((.((....((((((((....((((((...(........((((((((((.(((((.....(((((..(..((...(((((.....)))))..((((((....((.(((.....))).))...))))))..))..)..))))))))).).)))))))))))..))))))......))))))))....))..)))))......).).....)))))))))).....................((((((.....))))))..................))))))))...)).))))))..........)))))))).....(((((........)))))...)))))))(((((((.....((((((((((......)))))..........(((((((((.....(((((((((.................((((....)))).............(....).))))))))))))))))))...((.((((((((......)))))))).))....(((((....)))))........)))))...)))))))...........................)))))))))).)))).(((((((((..(((((...)))))...)))))))))(((((((.((((........(((((((...))))))).............((((((.(((((((...(((((((((((......................(((((........)))))..(((((.......(((.......)))..........((((....))))((.....(((....))).).)........))))))))))))...(............(((((.......(.((((((((((..((((.(((.((((((((...((.......))...)))))))..))))................((((((((((.....(((((...(((........(((((.....)))))..........................(((((((....))).)))).(((((...........)))))..............)))....)))))........)))....))))))).)))).)))))))))).))))))...........)........)))).)))))))))))))...)))))))))))...............))).))))))...((((................)))).....))))........)))).))))))).)))).)))..(((((((((((((((((..((...((((((((.........))))))))...................((((((((((..(((((..((((((.(.......(((((((....))))))).........).))))))..).)))).)))))))))).)).))))))))...(((((((...((((((((......))))))))..))))))))))))))))........((((.........(((((((.....))))))).....))))............'

        # unafold
        pred
        
        cutoff = 0.4
        
        dbns = [pred_1, pred_2]
        try:
            cutoff, consensus = calc_consensus_secstruc_for_dbn(dbns, threshold=cutoff)
        except ConflictInBasePairsError as error:
            conflicting_bps = BasePairs(eval(str(error).split('\'')[1]))
            solve_conflicts(conflicting_bps)   
            consensus_pred = conflicting_bps.toVienna(len(pred_1), 0)
            self.assertTrue(type(consensus_pred), ViennaStructure)
        else:
            self.assertTrue(False)
            
        # CRW_00528
        # ContextFold
        pred

        #unafold
        pred

        # consensus
        cutoff = 0.4
        dbns = [pred_3, pred_4]
        
        try:
            cutoff, consensus = calc_consensus_secstruc_for_dbn(dbns, threshold=cutoff)
        except ConflictInBasePairsError as error:
            conflicting_bps = BasePairs(eval(str(error).split('\'')[1]))
            solve_conflicts(conflicting_bps)
            consensus_pred = conflicting_bps.toVienna(len(pred_3), 0)
            self.assertTrue(type(consensus_pred), ViennaStructure)
        else:
            self.assertTrue(False)
        
    

class CalcConsensusSecstrucForBpsTests(TestCase):
    """
        Tests for calc_consensus_secstruc_for_bps
    """
    def setUp(self):
        """
        """
        list_of_dbns = [ViennaStructure(x) for x in SECSTRUCS]
        self.list_of_bps = [x.toPairs() for x in list_of_dbns]
        self.result = ViennaStructure(CONSENSUS).toPairs() # 1.0
        
        list_of_dbns = [ViennaStructure(x) for x in BASIC_EXAMPLE]
        self.list_of_bps_basic = [x.toPairs() for x in list_of_dbns]
        self.result_basic = ViennaStructure('.............').toPairs() # 1.0
        
    def test_invalid_input(self):
        """calc_consensus_secstruc_for_bps raises ValueError if length is None
        """
        self.assertRaises(ValueError, calc_consensus_secstruc_for_bps,
                          {'bps' : self.list_of_bps, 'threshold' : 1.0})
        
    def test_calc_consensus_secstruc(self):
        """calc_consensus_secstruc_for_bps should work fine
        """
        result = calc_consensus_secstruc_for_bps(self.list_of_bps, 59, 1.0)
        self.assertEqual(result, self.result)
        
    def test_threshold(self):
        """calc_consensus_secstruc_for_bps should be influenced by threshold
        """
        result = calc_consensus_secstruc_for_bps(self.list_of_bps_basic, 13)
        self.assertEqual(result, self.result_basic)
        
        result = calc_consensus_secstruc_for_bps(self.list_of_bps_basic, 13,
                                                 1.0)
        self.assertEqual(result, self.result_basic)
        
        result = calc_consensus_secstruc_for_bps(self.list_of_bps_basic, 13,
                                                 0.51)
        self.assertEqual(result, ViennaStructure('..(((...)))..').toPairs())
        
        result = calc_consensus_secstruc_for_bps(self.list_of_bps, 59, 0.625)
        self.assertEqual(result,
                         ViennaStructure('..........((....)).((((((((.......'+\
                                         '...))))))))..............').toPairs())
    
    def test_identity(self):
        """If there is only one, the same seq should be returned."""
        pairs = ViennaStructure('(.(.(..).))').toPairs()
        result = calc_consensus_secstruc_for_bps([pairs], 11)
        self.assertEqual(result, pairs)

    def test_empty(self):
        """Empty input raises an exception"""
        self.assertRaises(ConsensusSecstrucError,
                          calc_consensus_secstruc_for_bps, [], 11)

class TestTurnDbnIntoMatrix(TestCase):
    """tests for turn_dbn_into_interaction_matrix
    """
    
    def setUp(self):
        """sets everything up
        """
        self.seq = "AACCAAGGAA"
        self.dbn = "..((..)).."
                            # A    A    C    C    A    A    G    G    A    A
        self.matrix = array([
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# A
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# A 
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.],# C
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.],# C
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# A
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# A
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# G
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# G
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# A
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.] # A
                            ])
    
    def test_turn_dbn_into_interaction_matrix(self):
        """turn_dbn_into_interaction_matrix should work if there are some pairs
        """
        result = turn_dbn_into_interaction_matrix(self.dbn)
        assert_array_equal(result, self.matrix)
        
    def test_turn_dbn_into_interaction_matrix_no_pairs(self):
        """turn_dbn_into_interaction_matrix should work if no pairs
        """
        result = turn_dbn_into_interaction_matrix('...')
        assert_array_equal(result, zeros(9).reshape(3,3))
        
    def test_turn_dbn_into_interaction_matrix_arbitrary_value(self):
        """test_turn_dbn_into_interaction_matrix should work for arbiratry value
        """
        result = turn_dbn_into_interaction_matrix(self.dbn, -1)
        matrix = array([
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# A
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# A 
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  -1.,  0.,  0.],# C
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  -1.,  0.,  0.,  0.],# C
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# A
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# A
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# G
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# G
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],# A
                            [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.] # A
                            ])
        assert_array_equal(result, matrix)
    

BASIC_EXAMPLE = [
    '..(((...)))..',
    '..(((...)))..',
    '.(((...)))...',
    ]
    

    
SECSTRUCS = [
    '(.((((....((....)).((((((((.((.....)))))))))).....))))....)',
    '..((((....((....)).((((((((.((.....)))))))))).....)))).....',
    '..((((....((....)).((((((((.((.....)))))))))).....)))).....',
    '.................(.((((((((.((....)).)))))))).)............',
    '...................((((((((..........))))))))..............',
    '(.((((....((....)).((((((((.((....)).)))))))).....)))))....',
    '.(((......((....)).((((((((.((.....))))))))))....))).......',
    '..(((......))).....((((((((..........))))))))..............',
    ]

CONSENSUS = \
    '...................((((((((..........))))))))..............'

if __name__ == '__main__':
    main()
    
